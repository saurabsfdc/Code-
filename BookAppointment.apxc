public with sharing class BookAppointment {

    public String whatId {get; set;}
    public String whoId {get; set;}
    public String userId {get; set;}
    public String eventSubject {get; set;}
    
    
    
    public PageReference reset() {
        return null;
    }


    
    public Event evt {get; set;}    
    public Date earliestDate {get; set;}  
    
    public String selectedTime {get; set;}  
    
      
    public Map <Date, List<DateTime>> availableTimes {get; set;}
    public Boolean appointmentBooked {get; set;}
    
    public BookAppointment() {
        evt = new Event();
        earliestDate = Date.Today().addDays(1);
        evt.ActivityDate = earliestDate;
        availableTimes = new Map<Date, List<DateTime>>();
        randomizeMeetingsForToday();
        appointmentBooked = false;
    }
    
    
    public PageReference confirmMeetingTime() {
        
        selectedTime = selectedTime.replaceAll('Z','');
        
        List<String> dateTimeSplit = selectedTime.split(' ');
        List<String> dateSegments = dateTimeSplit[0].split('-');
        List<String> timeSegments = dateTimeSplit[1].split(':');
        
        System.debug('Prefered Meeting Time: ' + selectedTime + ' Date Segments ' + dateSegments + ' Time Segments ' + timeSegments );
        
        evt.StartDateTime = DateTime.newInstance(Integer.valueOf(dateSegments[0]), Integer.valueOf(dateSegments[1]), Integer.valueOf(dateSegments[2]), Integer.valueOf(timeSegments[0]), Integer.valueOf(timeSegments[1]), Integer.valueOf(timeSegments[2]));
        evt.EndDateTime = evt.StartDateTime.addMinutes(30);
        evt.WhatId = whatId;
        evt.WhoId = whoId;
        evt.Subject = eventSubject;
        evt.Type = 'Meeting';
        if(userId <> NULL) {
            evt.OwnerId = userId;
        }
        insert evt;
        appointmentBooked = true;
        return null;
    }
    public List<DateTime> getSelectedDateAvailableTimes() { 
        List<DateTime> dailyAvailableTimes = availableTimes.get(evt.ActivityDate);        
        System.debug('Daily Available Times' + dailyAvailableTimes);
        return dailyAvailableTimes;
    }
    
    public void randomizeMeetingsForToday() {
        List <DateTime> meetingTimes = new List<DateTime>();
        Date selectedDate = evt.ActivityDate;
        DateTime meetingDateTime = Datetime.newInstance(selectedDate.Year(), selectedDate.Month(), selectedDate.Day(), 09, 30, 00);
        
        System.debug('Check for Open Times ' + evt.ActivityDate);
        
        if(availableTimes.containsKey(evt.ActivityDate)) {
        
        } else {
            System.debug('Assign Dates and Time');
            while(meetingTimes.size() < 10 && meetingDateTime.hour() < 19) {
                if(Math.random() > 0.7) {
                    meetingTimes.add(meetingDateTime);
                }
                meetingDateTime = meetingDateTime.addMinutes(30);
        
            }
            System.debug('Meetings Times Today: ' + meetingTimes.size() + meetingTimes);
            
            availableTimes.put(selectedDate, meetingTimes);
        }
                 
    }
    
    
    
    public PageReference earlierDate() {
        evt.ActivityDate = evt.ActivityDate.addDays(-1);
        randomizeMeetingsForToday();
        return null;
    }
    
    public PageReference laterDate() {
        evt.ActivityDate = evt.ActivityDate.addDays(+1);
        randomizeMeetingsForToday();
        return null;    
    }
    
}